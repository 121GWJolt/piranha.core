@model Piranha.Areas.Manager.Models.PageEditModel
@using Piranha.Areas.Manager.Models
@{
    ViewBag.Title = "Edit page";
    ViewBag.Controller = "Page";

    var alias = (string)TempData["AliasSuggestion"];
}

@section script {
    <script type="text/javascript">
        $(document).on('click', '#submit-publish', function () {
            $('form#main-form').attr('action', '@Url.Action("Publish")').submit();
        });
        $(document).on('click', '#submit-unpublish', function () {
            $('form#main-form').attr('action', '@Url.Action("UnPublish")').submit();
        });
        $(document).on('click', '#btn-settings', function () {
            $('#panel-settings').slideToggle('fast');
            return false;
        });
        $(document).on('click', '#submit-alias', function (e) {
            e.preventDefault();
            $('form#alias-form').submit();
        });
        document.getElementById('Title').focus();
    </script>
}

@if (!string.IsNullOrEmpty(alias)) {
    using (var form = Html.BeginForm("AddAlias", "Page", FormMethod.Post, new { id="alias-form", @class = "form", role = "form" })) {
        @Html.Hidden("siteId", Model.SiteId)
        @Html.Hidden("pageId", Model.Id)
        @Html.Hidden("alias", alias)
        @Html.Hidden("redirect", Model.Slug)
    }
}

@using (var form = Html.BeginForm("Save", "Page", FormMethod.Post, new { @id = "main-form", @class = "form", @role = "form" })) {
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.Id)
    @Html.HiddenFor(m => m.OriginalPageId)
    @Html.HiddenFor(m => m.SiteId)
    @Html.HiddenFor(m => m.TypeId)
    @Html.HiddenFor(m => m.ContentType)
    @Html.HiddenFor(m => m.ParentId)
    @Html.HiddenFor(m => m.SortOrder)

    <div class="form-dimmer"></div>
    <div class="row">
        <div class="col-sm-12 buttons">
            <!-- Back -->
            <a href="@Url.Action("List", "Page", new { pageId = Model.Id })" class="btn btn-info">
                <span class="fas fa-angle-left"></span>
            </a>
            <!-- Settings -->
            <button id="btn-settings" type="button" class="btn btn-primary">
                <span class="fas fa-cog"></span>
            </button>

            <!-- Actions -->
            <div class="btn-group">
                <button type="submit" class="btn btn-labeled btn-success">
                    <span class="btn-label">
                        <i class="fas fa-check"></i>
                    </span>
                    @if (Model.Published.HasValue) {
                        <text>Update</text>
                    } else {
                        <text>Save draft</text>
                    }
                </button>
                <button type="button" class="btn btn-success dropdown-toggle" data-toggle="dropdown">
                    <span class="caret"></span>
                    <span class="sr-only">Toggle Dropdown</span>
                </button>
                <ul class="dropdown-menu dropdown-menu-right" role="menu">
                    <li><a href="~/@Model.Slug" target="_blank">Preview</a></li>
                    @if ((await Authorization.AuthorizeAsync(User, Piranha.Manager.Permission.PagesPublish)).Succeeded) {
                        if (Model.Published.HasValue) {
                            <li><a id="submit-unpublish" href="#">Unpublish</a></li>
                        } else {
                            <li><a id="submit-publish" href="#">Publish now</a></li>
                        }
                    }
                    @if (Model.OriginalPageId.HasValue) {
                        if ((await Authorization.AuthorizeAsync(User, Piranha.Manager.Permission.PagesSave)).Succeeded) {
                            <li class="divider"></li>
                            <li><a href="@Url.Action("Detach", new { @id = Model.Id })">Detach page</a></li>
                        }
                    }
                    @if ((await Authorization.AuthorizeAsync(User, Piranha.Manager.Permission.PagesDelete)).Succeeded) {
                        <li class="divider"></li>
                        <li><a href="@Url.Action("Delete", new { @id = Model.Id })" class="confirm-delete" data-message="Are you sure you want to delete the page?"><span class="text-danger">Delete page</span></a></li>
                    }
                </ul>
            </div>
        </div>
    </div>

    @if (!string.IsNullOrWhiteSpace(ViewBag.Message)) {
        <div class="row">
            <div class="col-sm-12">
                <div class="@ViewBag.MessageCss">
                    @Html.Raw(ViewBag.Message)
                </div>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(alias)) {
        <div class="row">
            <div class="col-sm-12">
                <div class="alert alert-info">
                    <div class="row">
                        <div class="col-xs-10">
                            <p>
                                <strong>Info</strong>: It seems you have changed the permalink of the page. 
                                Do you want to create an <strong>Alias</strong> from <code>/@alias</code> 
                                to <code>/@Model.Slug</code>
                            </p>
                        </div>
                        <div class="col-xs-2 text-right">
                            <button id="submit-alias" class="btn btn-default btn-sm">Ok</button>
                        </div>
                    </div>                    
                </div>
            </div>
        </div>        
    }

    <div class="form-group">
        @Html.TextBoxFor(m => m.Title, new { @class = "form-control title", maxlength = 128, placeholder = "Your page title" })
        @Html.ValidationMessageFor(m => m.Title)
    </div>

    <div id="panel-settings" class="panel panel-default" style="display:none">
        <div class="panel-heading">
            <h3 class="panel-title">Settings</h3>
        </div>
        <div id="basic-settings" class="panel-body">
            @Html.Partial("Partial/_BasicSettings", Model)
        </div>
    </div>

    <div class="panel panel-default">
        @if (!Model.OriginalPageId.HasValue) {
            <div class="panel-heading">
                @for (var n = Model.Regions.Count - 1; n >= 0; n--) {
                    var primary = n == 0 && !Model.PageType.UseBlocks && !Model.PageContentType.CustomEditor;
                    <button class="btn btn-sm btn-secondary pull-right btn-toggle @(primary ? "btn-primary" : "")" data-target="#region-@Model.Regions[n].Id">@Model.Regions[n].Title</button>
                }
                @if (Model.PageType.UseBlocks) {
                    <button class="btn btn-sm btn-secondary pull-right btn-toggle @(!Model.PageContentType.CustomEditor ? "btn-primary" : "")" data-target="#page-blocks">Content</button>
                }
                @if (Model.PageContentType.CustomEditor) {
                    <button class="btn btn-sm btn-secondary pull-right btn-toggle btn-primary" data-target="#custom-editor">@Model.PageContentType.Title</button>
                }
                <h3 class="panel-title">Content</h3>
            </div>
            @if (Model.PageContentType.CustomEditor) {
                <div id="custom-editor" class="panel-body custom-editor">
                    @Html.EditorFor(m => m, Model.PageContentType.Id)
                </div>
            }
            @if (Model.PageType.UseBlocks) {
                <div id="page-blocks" class="panel-body" @(Model.PageContentType.CustomEditor ? "style=display:none" : "")>
                    <div class="page-blocks-body">
                        <div class="sortable">
                            <div class="unsortable">
                                <div class="block-add">
                                    <div class="block-add-dialog">
                                        @foreach (var category in Piranha.App.Blocks.GetCategories()) {
                                            <label>@category</label>
                                            @foreach (var block in Piranha.App.Blocks.GetByCategory(category)) {
                                                <a href="#" data-typename="@block.TypeName"><i class="@block.Icon"></i>@block.Name</a>
                                            }
                                        }
                                    </div>
                                    <a href="#" class="block-add-toggle">
                                        <hr><span class="fas fa-plus"></span>
                                    </a>
                                </div>
                            </div>
                            @Html.EditorFor(m => m.Blocks)
                        </div>
                        @if (Model.Blocks.Count == 0) {
                            <div class="block-info content-preview">
                                <p>
                                    It looks like this page doesn't have any content yet! To get started just press the
                                    plus above to add your first block.
                                </p>
                            </div>
                        }
                    </div>
                </div>
            }
            @for (var n = 0; n < Model.Regions.Count; n++) {
                var primary = n == 0 && !Model.PageType.UseBlocks && !Model.PageContentType.CustomEditor;
                <div id="region-@Model.Regions[n].Id" class="panel-body" @(!primary ? "style=display:none" : "")>
                    @Html.HiddenFor(m => m.Regions[n].Id)
                    @Html.HiddenFor(m => m.Regions[n].Title)
                    @Html.HiddenFor(m => m.Regions[n].CLRType)
                    @Html.EditorFor(m => m.Regions[n], Model.Regions[n].GetType().Name, new { 
                        pageTypeId = Model.PageType.Id,
                        regionTypeId = Model.Regions[n].Id,
                        regionIndex = n,
                        contentType = "page"
                    })
                </div>
            }
        } else {
            <div class="panel-heading">
                <h3 class="panel-title">Page copy</h3>
            </div>
            <div id="page-blocks" class="panel-body">
                <div class="page-blocks-body">
                    <div class="block-info content-preview">
                        <p>
                            This page is a copy and has no local content. To edit the original, click 
                            <a href="@Url.Action("Edit", "Page", new { id = Model.OriginalPageId})">here</a>.
                        </p>
                    </div>
                </div>
            </div>
        }
    </div>
}